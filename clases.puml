@startuml
'https://plantuml.com/class-diagram


package "Modelo" {
abstract class Socio
class SocioEstandar extends Socio
class SocioFederado extends Socio
class SocioInfantil extends Socio



class Socio{
- noSocio: String
- nombre: String
- tipoSocio: enum TipoSocio
+ getNoSocio(): String
+ getNombre(): String
+ getTipoSocio(): TipoSocio
+ setNoSocio(nombre: String): void
+ setNombre(nombre: String): void
+ setTipoSocio(tipoSocio: TipoSocio): void
+ calcularCuota(): double
+ costeExcursion(excursion: Excursion): double
+ Socio()
+ Socio(noSocio: String, nombre: String, tipoSocio: TipoSocio)
+ toString(): String
}

class SocioEstandar {
- nif: String
- seguro: Seguro
+ getNif(): String
+ getSeguro(): Seguro
+ setNif(nif: String): void
+ setSeguro(seguro: Seguro): void
+ SocioEstandar()
+ SocioEstandar(noSocio: String, nombre: String, tipoSocio: TipoSocio, nif: String, seguro: Seguro)
}

class SocioFederado {
- nif: String
- federacion: Federacion
+ getNif(): String
+ getFederacion(): Federacion
+ setNif(nif: String): void
+ setFederacion(federacion: Federacion): void
+ SocioFederado()
+ SocioFederado(noSocio: String, nombre: String, tipoSocio: TipoSocio, nif: String, federacion: Federacion)
}

class SocioInfantil {
- noTutor: String
+ getNoTutor(): String
+ setNoTutor(noTutor: String): void
+ SocioInfantil()
+ SocioInfantil(noSocio: String, nombre: String, tipoSocio: TipoSocio, noTutor: String)
}

class Excursion {
- codigo: String
- descripcion: String
'Date o DateTime?
- fecha: Date
- noDias: int
- precio: double
+ getCodigo(): String
+ getDescripcion(): String
+ getFecha(): Date
+ getNoDias(): int
+ getPrecio(): precio
+ setCodigo(codigo: String): void
+ setDescripcion(descripcion: String): void
+ setFecha(fecha: Date): void
+ setNoDias(noDias: int): void
+ setPrecio(precio: double): void
+ Excursion()
+ Excursion(codigo: String, descripcion: String, fecha: Date, noDias: int,precio: double)
+ calcPrecio(socio: Socio)
}

class Seguro {
- idSeguro: int
- tipo: TipoSeguro
- precio: double
+ getIdSeguro(): int
+ getTipo(): TipoSeguro
+ getPrecio(): double
+ setIdSeguro(idSeguro: int) : void
+ setTipo(tipo: TipoSeguro): void
+ setPrecio(precio: double): void
+ Seguro()
+ Seguro(idSeguro: int, tipoSeguro: TipoSeguro, precio: double)
}

class Federacion{
- codigo: String
- nombre: String
+ getCodigo(): String
+ getNombre(): String
+ setCodigo(codigo: String): void
+ setNombre(nombre: String): void
+ Federacion()
+ Federacion(codigo: String, nombre: String)
}

class Inscripcion {
- idInscripcion: String
- socio: Socio
- excursion: Excursion
+ getIdInscripcion(): String
+ getSocio(): Socio
+ getExcursion(): Excursion
+ setIdInscripcion(idInscripcion: String): void
+ setSocio(socio: Socio): void
+ setExcursion(excursion: Excursion): void
+ Inscripcion()
+ Inscripcion(idInscripcion: String, socio: Socio, excursion: Excursion)
+ cancelarInscripcion(): boolean
}

class ListaSocios {
- listaSocio: ArrayList<Socio>
+ anyadirSocio(socio: Socio): void
+ eliminarSocio(noSocio: String): void
+ buscarSocio(noSocio: String): Socio
+ filtrarPorTipo(tipo: TipoSocio): ArrayList<Socio>
+ eliminarSocio(socio: Socio): void
}

class ListaExcursion {
- listaExcursiones: ArrayList<Excursion>
+ anyadirExcursion(excursion: Excursion): void
+ getExcursion(codigo: String): Excursion
+ filtrarFecha(fecha: Date): ArrayList<Excursion>
+ eliminarExcursion(excursion: Excursion): void
}

class ListaInscripcion {
- listaInsc: ArrayList<Inscripcion>
+ anyadirInscripcion(excursion: Excursion): void
+ getInscripcion(idInscripcion: String): Inscripcion
+ eliminarInscripcion:(inscripcion: Inscripcion): void
+ filtraSocio(socio: Socio): ArrayList<Inscripcion>
+ filtrarFecha(fecha: Date): ArrayList<Inscripcion>
}

enum TipoSeguro {
BÁSICO
COMPLETO
}

enum TipoSocio {
ESTÁNDAR
FEDERADO
INFANTIL
}

}

package Vista{
    class VistaSocios {
        + mostrarSocios(lista: ArrayList<Socio>): void
        + detalleSocio(socio: Socio): void
        + formSocio(): Socio
    }

    class VistaExcursiones {
        + mostrarExcursiones(lista: ArrayList<Excursion>): void
        + detalleExcursion(excursion: Excursion): void
        + formExcursion(): Excursion
    }

    class VistaInscripciones {
        + mostrarInscripciones(lista: ArrayList<Inscripcion>): void
        + formInscripcion(): Inscripcion
    }
}

ListaSocios o-- "0..*" Socio
ListaExcursion o-- "0..*" Excursion
ListaInscripcion o-- "0..*" Inscripcion
@enduml